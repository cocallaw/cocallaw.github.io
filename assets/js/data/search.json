[
  
  {
    "title": "Create Confidential Compute Capable Custom Images from Windows CVMs",
    "url": "/posts/Creating-Confidentail-Compute-Images-from-CVMs/",
    "categories": "Confidential Compute",
    "tags": "images",
    "date": "2025-01-06 12:00:00 -0500",
    





    
    "snippet": "Confidential Compute Custom ImagesCreating a custom image from an Azure Confidential Compute VM (CVM) requires following a different process than you would for a regular Azure VM. This is due to th...",
    "content": "Confidential Compute Custom ImagesCreating a custom image from an Azure Confidential Compute VM (CVM) requires following a different process than you would for a regular Azure VM. This is due to the design of CVMs, which utilize an OS disk and a small encrypted data disk that contains the VM Guest State(VMGS) information. As a result, using the Capture button in the Azure portal or the New-AzImage command in Azure PowerShell will not produce the desired results.This process to create a custom image from a CVM is necessary so that the captured image is free of and VM Guest State information and the correct properties are set for the image version and reference in a Azure Compute Gallery.The steps outlined below require that you have access to the Azure Subscriptions containing the resources, and the current version of both Azure CLI and AzCopy installed. Commands were tested using Azure CLI from a Powershell Core session.  This process to create a custom image is for an existing Windows based CVM using with Confidential OS disk encryption enabled using either PMK or CMK.Prepare the CVM OS for CaptureOnce the customization of the Windows OS is complete, the next step is to Disable BitLocker, wait for the decryption to complete, and then run Sysprep.To disable BitLocker and check the decryption status of the OS disk, you can use the following commands in an elevated Command Prompt.# Disable BitLockermanage-bde -off C:# Check the decryption statusmanage-bde -status C:When the decryption status returns as Fully Decrypted, Sysprep can now be run. Selecting Generalize and Shutdown as the options.Creating the Custom ImageCollect OS Disk InformationThe first step is to make sure the CVM the image is being created from is fully deallocated and then collect information about the OS disk. To do so we will need to know the resource group name, VM name, and region that the CVM is located in, we will set these as variables for easy reference.$region = \"North Europe\"$resourceGroupName = \"rg-custimg-lab-01\"$vmName = \"custcvm-01\"With the variables set, verify the VM is deallocated# Deallocate the VMaz vm deallocate --name $vmname --resource-group $resourceGroupName# Collect the OS Disk information$disk_name = (az vm show --name $vmname --resource-group $resourceGroupName | jq -r .storageProfile.osDisk.name)$disk_url = (az disk grant-access --duration-in-seconds 3600 --name $disk_name --resource-group $resourceGroupName | jq -r .accessSas)Create a Storage Account for the VHDNext, create a storage account, this will be used to store the exported VHD of the CVMs OS disk before it is uploaded to the Compute Gallery. For this part of the process, you will need to know the name of the Storage Account and Container that will be created.$storageAccountName = \"stgcvmvhd01\"$storageContainerName = \"cvmimages\"$referenceVHD = \"${vmName}.vhd\"Create the Storage Account and Container# Create Storage Accountaz storage account create --resource-group ${resourceGroupName} --name ${storageAccountName} --location $region --sku \"Standard_LRS\"# Create a container in the Storage Accountaz storage container create --name $storageContainerName --account-name $storageAccountName --resource-group $resourceGroupNameWith the Storage Account and Container created, generate a Shared Access Signature (SAS) token to upload the disk image to the container. Be sure to set the expiry date to a date in the future.# Generate a SAS token for the container$container_sas=(az storage container generate-sas --name $storageContainerName --account-name $storageAccountName --auth-mode key --expiry 2025-01-01 --https-only --permissions dlrw -o tsv)Using the SAS token and information collected, the VHD can now be exported to the Storage Account using AzCopy.# Build the Blob URL$blob_url=\"https://${storageAccountName}.blob.core.windows.net/$storageContainerName/$referenceVHD\"# Export the VHD using AzCopyazcopy copy \"$disk_url\" \"${blob_url}?${container_sas}\"Upload the Image to a Compute GalleryWith the VHD successfully exported to the Storage Account, the next step is to create an image definition in the Compute Gallery and upload the VHD to the gallery as a new version. For this part of the process, you will need to know the name of the Compute Gallery, Image Definition, Offer, Publisher, SKU, and Version number that will be created.$galleryName = \"acglabneu01\"$imageDefinitionName = \"cvmimage01\"$OfferName = \"offername01\"$PublisherName = \"pubname01\"$SkuName = \"skuname01\"$galleryImageVersion = \"1.0.0\"If a Compute Gallery does not already exist, create one using the following command, and create an Image Definition that has the required features and parameters set for Confidential VM support.# Create the Compute Galleryaz sig create --resource-group $resourceGroupName --gallery-name $galleryName# Create the Image Definitionaz sig image-definition create --resource-group  $resourceGroupName --location $region --gallery-name $galleryName --gallery-image-definition $imageDefinitionName --publisher $PublisherName --offer $OfferName --sku $SkuName --os-type windows --os-state Generalized --hyper-v-generation V2  --features SecurityType=ConfidentialVMSupportedTo upload the VHD to the Compute Gallery, the ID of the Storage Account that contains tehVHD is required when creating the image version. This can be obtained using the following command.# Get the Storage Account ID$storageAccountId=(az storage account show --name $storageAccountName --resource-group $resourceGroupName | jq -r .id)With everything in place, the final step is to create the image version in the Compute Gallery using the VHD that was exported from the CVM.# Create the Image Versionaz sig image-version create --resource-group $resourceGroupName --gallery-name $galleryName --gallery-image-definition $imageDefinitionName --gallery-image-version $galleryImageVersion --os-vhd-storage-account $storageAccountId --os-vhd-uri $blob_urlThe Full Image Export ProcessBelow is the full process to export the OS disk from the CVM, create the image, and upload it to the Compute Gallery.# Set Variables$region = \"North Europe\"$resourceGroupName = \"rg-custimg-lab-01\"$vmName = \"custcvm-01\"$storageAccountName = \"stgcvmvhd01\"$storageContainerName = \"cvmimages\"$referenceVHD = \"${vmName}.vhd\"$galleryName = \"acglabneu01\"$imageDefinitionName = \"cvmimage01\"$OfferName = \"offername01\"$PublisherName = \"pubname01\"$SkuName = \"skuname01\"$galleryImageVersion = \"1.0.0\"# Deallocate the VMaz vm deallocate --name $vmName --resource-group $resourceGroupName# Collect the OS Disk information$disk_name = (az vm show --name $vmName --resource-group $resourceGroupName | jq -r .storageProfile.osDisk.name)$disk_url = (az disk grant-access --duration-in-seconds 3600 --name $disk_name --resource-group $resourceGroupName | jq -r .accessSas)# Create Storage Accountaz storage account create --resource-group ${resourceGroupName} --name ${storageAccountName} --location $region --sku \"Standard_LRS\"# Create a container in the Storage Accountaz storage container create --name $storageContainerName --account-name $storageAccountName --resource-group $resourceGroupName# Generate a SAS token for the container$container_sas=(az storage container generate-sas --name $storageContainerName --account-name $storageAccountName --auth-mode key --expiry 2025-01-01 --https-only --permissions dlrw -o tsv)# Build the Blob URL$blob_url=\"https://${storageAccountName}.blob.core.windows.net/$storageContainerName/$referenceVHD\"# Export the VHD using AzCopyazcopy copy \"$disk_url\" \"${blob_url}?${container_sas}\"# Create the Compute Galleryaz sig create --resource-group $resourceGroupName --gallery-name $galleryName# Create the Image Definitionaz sig image-definition create --resource-group  $resourceGroupName --location $region --gallery-name $galleryName --gallery-image-definition $imageDefinitionName --publisher $PublisherName --offer $OfferName --sku $SkuName --os-type windows --os-state Generalized --hyper-v-generation V2  --features SecurityType=ConfidentialVMSupported# Get the Storage Account ID$storageAccountId=(az storage account show --name $storageAccountName --resource-group $resourceGroupName | jq -r .id)# Create the Image Versionaz sig image-version create --resource-group $resourceGroupName --gallery-name $galleryName --gallery-image-definition $imageDefinitionName --gallery-image-version $galleryImageVersion --os-vhd-storage-account $storageAccountId --os-vhd-uri $blob_url"
  },
  
  {
    "title": "Creating Confidential Compute Capable Custom Images from Standard Windows VMs",
    "url": "/posts/Creating-Confidential-Compute-Capable-Custom-Images/",
    "categories": "Confidential Compute",
    "tags": "images",
    "date": "2025-01-05 12:00:00 -0500",
    





    
    "snippet": "Confidential Compute and Custom ImagesCreating a custom image that can be used to create Azure Confidential Compute (ACC) VMs is similar to creating a standard custom image, but with a slight twist...",
    "content": "Confidential Compute and Custom ImagesCreating a custom image that can be used to create Azure Confidential Compute (ACC) VMs is similar to creating a standard custom image, but with a slight twist when it comes to how the image is captured. This post covers how to create a custom image that could be used to provision a new ACC VM using either Customer Managed Key (CMK) or Platform Managed Key (PMK) encryption in any Azure region that has ACC capable AMD VM SKUs.It is important to use the proper settings when creating the VM used to generate the custom image and capture the custom image, so that settings and features such as BitLocker are not enabled, which would require additional steps before capturing and possibly cause issues when using the captured image to provision a new CVM.The steps outlined below require that you have access to the Azure Subscriptions containing the resources, and the current version of Azure PowerShell installed. Commands were tested using Azure PowerShell from a Powershell Core session.Creating the VM for Custom Image Capture      From the Azure Portal, Select Virtual Machine and Create New VM        On the Instance Detail page set Security Type to Standard, and select a non-ACC VM SKU            On the Disks tab, set Key Management to Platform-managed Key and leave Encryption at host unchecked            Once the Custom Image VM has been deployed, connect to the machine and perform any customization tasks required.        When all customizations are complete, run Sysprep with OOBE, Generalize and Shutdown selected            Once Sysprep has completed, the VM is ready to be captured  Capture the Custom ImageFrom an Azure PowerShell session connected to the Subscription that contains the Custom Image VM, set the proper values for the variables $vmName, $rgName, $location and $imageName.$vmName = \"customvm01\"$rgNameCustImg = \"rg-custom-img-01\"$location = \"North Europe\"$imageName = \"image-01\"With the variables set run the following commands to create a Manged Image resource from the OS disk of the Custom Image VM.# Verify that the VM is deallocatedStop-AzVM -ResourceGroupName $rgNameCustImg -Name $vmName -Force# Set the status of the VM to generalizedSet-AzVm -ResourceGroupName $rgNameCustImg -Name $vmName -Generalized# Store the VM details in a variable$vm = Get-AzVM -Name $vmName -ResourceGroupName $rgNameCustImg# Create the image configuration $imageConfig = New-AzImageConfig -Location $location -SourceVirtualMachineId $vm.Id -HyperVGeneration V2# Create an image from the VMNew-AzImage -ImageName $imageName -ResourceGroupName $rgNameCustImg -Image $imageConfigImporting the Custom Image into Azure Compute GalleryAzure PortalIn the Azure Compute Gallery create a new Image Definition, with the Security Type set to Trusted launch and confidential VM supportedOn the next page select the Managed Image Resource to import to the Compute Gallery for the Image DefinitionAzure PowerShellTo import the Managed Image into the Compute Gallery, there first needs to be a new Image Definition created and then the Managed Image imported as a new version of the image definition.To create the new Image Definition, set the following variables$rgNameACG  = \"rg-compute-gallery-01\"$location = \"North Europe\"$galleryName = \"acgallery01\"$galleryImageDefinitionName = \"Def01\"$publisherName = \"Publisher01\"$offerName = \"Offer01\"$skuName = \"Win11-24H2\"$description = \"Windows 11 24H2\"# Variables to set the features of the Image Definition$ConfidentialVMSupported = @{Name='SecurityType';Value='TrustedLaunchAndConfidentialVmSupported'}$IsHibernateSupported = @{Name='IsHibernateSupported';Value='False'}$features = @($ConfidentialVMSupported,$IsHibernateSupported)With the variables set, run the following command to create the new Image Definition in the Compute GalleryNew-AzGalleryImageDefinition -ResourceGroupName $rgNameACG -GalleryName $galleryName -Name $galleryImageDefinitionName -Location $location -Publisher $publisherName -Offer $offerName -Sku $skuName -OsState \"Generalized\" -OsType \"Windows\" -Description $description -Feature $features -HyperVGeneration \"V2\"Now that there is an Image Definition in the Compute Gallery, the Managed Image that was created from the Custom Image VM can be imported as a version of the Image Definition. To do this, first the Resource ID of the Managed Image needs to be retrieved.$imageRID = (Get-AzImage -ResourceGroupName $rgNameCustImg -ImageName $imageName).Id$rgNameACG = \"rg-compute-gallery-01\"$location = \"North Europe\"$galleryName = \"acgallery01\"$galleryImageDefinitionName = \"Def01\"$galleryImageVersionName = \"0.0.1\"$sourceImageId = $imageRID$storageAccountType = \"Premium_LRS\"New-AzGalleryImageVersion -ResourceGroupName $rgNameACG -GalleryName $galleryName -GalleryImageDefinitionName $galleryImageDefinitionName -Name $galleryImageVersionName -Location $location -StorageAccountType $storageAccountType -SourceImageId $sourceImageIdOnce the image has been imported and the new Definition created in the Compute Gallery, you can utilizes either the Resource ID of the new Image Definition as a parameter in a template file or create new Confidential VMs from the Compute Gallery using the Azure Portal."
  }
  
]

